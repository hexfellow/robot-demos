/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_PUBLIC_API_TYPES_PB_H_INCLUDED
#define PB_PUBLIC_API_TYPES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _RobotType {
    /* Invalid Robot Type. This is the default value when you do a factory reset. */
    RobotType_RtUnknown = 0,
    /* //// Bases //////
//// 底盘机器人 ////// */
    RobotType_RtTriggerA3 = 1,
    RobotType_RtMaverX4 = 2,
    /* Custom PCW vehicle. No matter how many PCW modules are used, all of them are treated as this same type of vehicle. */
    RobotType_RtCustomPcwVehicle = 4,
    RobotType_RtMaverL4 = 20,
    RobotType_RtMaverL2 = 21,
    RobotType_RtMark1DiffBBDriver = 6,
    RobotType_RtArk2LrDriver = 5,
    /* Legacy */
    RobotType_RtMark1McnmBBDriver = 7,
    /* //// Linear Lifts //////
//// 线性升降机 //////
 Linear Lifts can only be controlled by position with max speed.
 线性升降机只能通过位置控制，并且有最大速度限制。 */
    RobotType_RtLotaLinearLift = 8,
    /* //// Rotational Lifts //////
//// 旋转升降机 ////// */
    RobotType_RtZeta3Lift = 13,
    /* //// Arm //////
//// 机械臂 //////
 Legacy */
    RobotType_RtArmSaber750d3Lr3DmDriver = 9,
    RobotType_RtArmSaber750d4Lr3DmDriver = 10,
    RobotType_RtArmSaber750h3Lr3DmDriver = 11,
    RobotType_RtArmSaber750h4Lr3DmDriver = 12,
    /* Current MainStream Products */
    RobotType_RtArmSaberD6X = 14,
    RobotType_RtArmSaberD7X = 15,
    RobotType_RtArmArcherD6Y = 16,
    /* //// Special modes //////
 Working purely as a can bus forwarder. */
    RobotType_RtPureForwardOnly = 100
} RobotType;

/* Base State */
typedef enum _BaseState {
    BaseState_BsParked = 0,
    BaseState_BsAlgrithmControl = 1,
    BaseState_BsOvertakeSpeedControl = 2,
    BaseState_BsOvertakeZeroResistanceControl = 3,
    BaseState_BsEmergencyStop = 4
} BaseState;

typedef enum _LiftState {
    LiftState_LsBrake = 0,
    LiftState_LsCalibrating = 1,
    LiftState_LsAlgrithmControl = 2,
    LiftState_LsOvertakeControl = 3,
    LiftState_LsEmergencyStop = 4
} LiftState;

/* ////// Arm ////////// */
typedef enum _ArmMode {
    ArmMode_AmBrake = 0,
    ArmMode_AmApiControl = 1,
    ArmMode_AmFreeDrag = 2, /* Floating, ZeroForce feel, etc */
    ArmMode_AmZeroCurrent = 3
} ArmMode;

typedef enum _HandType {
    HandType_HtInvalid = 0,
    HandType_HtGp100 = 1
} HandType;

typedef enum _ReportFrequency {
    ReportFrequency_Rf1000Hz = 0,
    ReportFrequency_Rf500Hz = 3,
    ReportFrequency_Rf250Hz = 4,
    ReportFrequency_Rf100Hz = 1,
    ReportFrequency_Rf50Hz = 2
} ReportFrequency;

/* Deliberately named to ParkingStop instead of EmergencyStop, to indicate that it is NOT emergency stop. Do not use this for safety related operations.
 故意命名为 ParkingStop 而不是 EmergencyStop，以表明它不是紧急停止。不要用于安全相关操作。 */
typedef enum _ParkingStopCategory {
    ParkingStopCategory_PscEmergencyStopButton = 0,
    ParkingStopCategory_PscMotorHasError = 1,
    ParkingStopCategory_PscBatteryProtection = 2,
    ParkingStopCategory_PscGamepadTriggered = 3,
    ParkingStopCategory_PscUnknownParkingStopCategory = 4,
    ParkingStopCategory_PscAPICommunicationTimeout = 5,
    ParkingStopCategory_PscLimitSwitchTriggered = 6,
    ParkingStopCategory_PscBmsTimeout = 7
} ParkingStopCategory;

/* Warning category.
 警告类别。 */
typedef enum _WarningCategory {
    WarningCategory_WcUnknownWarningCategory = 0,
    WarningCategory_WcBatteryLow = 1
} WarningCategory;

typedef enum _MotorError {
    MotorError_MeCommunicationError = 0,
    MotorError_MeOverCurrent = 1,
    MotorError_MeOverVoltage = 2,
    MotorError_MeUnderVoltage = 3,
    MotorError_MeMotorOverTemperature = 4,
    MotorError_MeDriverOverTemperature = 5,
    MotorError_MeGeneralError = 6
} MotorError;

/* Struct definitions */
typedef struct _BaseEstimatedOdometry {
    float speed_x; /* m/s */
    float speed_y; /* m/s */
    float speed_z; /* rad/s */
    double pos_x; /* m */
    double pos_y; /* m */
    double pos_z; /* rad */
} BaseEstimatedOdometry;

typedef struct _XyzSpeed {
    float speed_x;
    float speed_y;
    float speed_z;
} XyzSpeed;

typedef struct _SimpleBaseMoveCommand {
    pb_size_t which_command;
    union {
        XyzSpeed xyz_speed;
        bool zero_resistance;
        bool brake;
    } command;
} SimpleBaseMoveCommand;

typedef struct _RotateLiftRuntimeConfig {
    /* Set max speed for position control. Must not be negative. */
    pb_callback_t pos_mode_max_speed;
} RotateLiftRuntimeConfig;

typedef struct _LinearLiftCommand {
    pb_size_t which_command;
    union {
        /* No matter calibrate is true or false, will always start calibration when oneof selects this.
     Unlike base you have the clear parking stop option (E.g. If triggered by limit switch, the exact moment you clear it, it get triggered again)
     Therefore to clear clearable parking stop, send calibrate command directly.
     DO NOT frequently send calibrate command. */
        bool calibrate;
        /* Encoder position.
     You can calculate this from meters by multiplying with pulse_per_rotation.
     Value you send will be clamped to [0, max_pos].
     Unlike base, you don't have to keep sending target_pos, though it is recommended to do so. */
        int64_t target_pos;
        /* No matter brake is true or false, brake will be applied when oneof selects this.
     Once recieved, will apply brake immediately and get into LsBrake mode.
     You can exit LsBrake mode by sending target_pos command or calibrate command.
     You don't have to keep sending brake command, though it is recommended to do so. */
        bool brake;
        /* Set speed. */
        uint32_t set_speed;
    } command;
} LinearLiftCommand;

typedef struct _HandStatus {
    HandType hand_type;
    pb_callback_t motor_status;
} HandStatus;

typedef struct _GamepadRead {
    float left_stick_x;
    float left_stick_y;
    float right_stick_x;
    float right_stick_y;
    bool left_bumper;
    bool right_bumper;
    float left_trigger;
    float right_trigger;
    bool a_button;
    bool b_button;
    bool x_button;
    bool y_button;
    bool select_button;
    bool start_button;
    bool left_stick_button;
    bool right_stick_button;
    bool dpad_up;
    bool dpad_down;
    bool dpad_left;
    bool dpad_right;
} GamepadRead;

typedef struct _ImuAcceleration {
    float ax; /* m/s^2 */
    float ay; /* m/s^2 */
    float az; /* m/s^2 */
} ImuAcceleration;

typedef struct _ImuAngularVelocity {
    float wx; /* rad/s */
    float wy; /* rad/s */
    float wz; /* rad/s */
} ImuAngularVelocity;

typedef struct _ImuQuaternion {
    float qx; /* unitless */
    float qy; /* unitless */
    float qz; /* unitless */
    float qw; /* unitless */
} ImuQuaternion;

typedef struct _ImuData {
    bool has_acceleration;
    ImuAcceleration acceleration;
    bool has_angular_velocity;
    ImuAngularVelocity angular_velocity;
    bool has_quaternion;
    ImuQuaternion quaternion;
} ImuData;

/* Parking stop detail.
 停车停止详细信息。 */
typedef struct _ParkingStopDetail {
    /* For human reading. Do not use this for programmatic operations.
 仅供人类阅读。不要用于编程操作。 */
    pb_callback_t reason;
    /* Parking stop category. This can be used for programmatic operations.
 停车停止类别。可用于编程操作。 */
    ParkingStopCategory category;
    /* If this parking stop can be cleared remotely. Some errors can be recovered remotely (e.g. API Communication Timeout). 
 Some are not, and can only be cleared by when errors are gone, e.g. Battery Protection.
 表明这个停车停止可以远程清除。有些错误可以远程清除（例如 API 通信超时）。有些错误不能远程清除，只能当错误消失时清除，例如电池保护。 */
    bool is_remotely_clearable;
} ParkingStopDetail;

typedef struct _BaseStatus {
    BaseState state;
    /* Weather the API control is initialized. */
    bool api_control_initialized;
    float battery_voltage; /* V */
    uint32_t battery_thousandth; /* 1/1000 */
    pb_callback_t motor_status;
    uint32_t session_holder; /* 0 means no session holder */
    /* Only avalible on vehicles that have BMS. */
    bool has_battery_charging;
    bool battery_charging;
    bool has_parking_stop_detail;
    ParkingStopDetail parking_stop_detail;
    bool has_warning;
    WarningCategory warning;
    /* Not all base types support this! */
    bool has_estimated_odometry;
    BaseEstimatedOdometry estimated_odometry;
} BaseStatus;

typedef struct _RotateLiftStatus {
    bool calibrated;
    LiftState state;
    pb_callback_t motor_status;
    /* todo consider move max_pos and min_pos to MotorStatus as a optional field */
    pb_callback_t max_pos;
    pb_callback_t min_pos;
    bool has_parking_stop_detail;
    ParkingStopDetail parking_stop_detail;
} RotateLiftStatus;

/* Read motor_status of APIUp to get current position */
typedef struct _LinearLiftStatus {
    bool calibrated;
    LiftState state;
    /* The max position you can set using software. */
    int64_t max_pos;
    int64_t current_pos;
    /* Number of pulses per rotation, output asix
 Number of pulses per meter, for linear motor */
    uint32_t pulse_per_rotation;
    /* Pulses per second. ReadOnly, defines the max speed of the lift. */
    uint32_t max_speed;
    /* Pulses per second */
    uint32_t speed;
    bool has_parking_stop_detail;
    ParkingStopDetail parking_stop_detail;
    bool has_custom_button_pressed;
    bool custom_button_pressed;
} LinearLiftStatus;

typedef struct _ArmStatus {
    /* Weather the API control is initialized. */
    bool api_control_initialized;
    ArmMode current_mode;
    bool calibrated;
    pb_callback_t motor_status;
    /* Arm is special. Api timeout will not be treated as fatal error, it will just send a log and disable it self, releasing the session id.
 Switching to mode the user sets as default disabled mode. (AmBrake, AmFreeDrag, AmZeroCurrent) */
    bool has_parking_stop_detail;
    ParkingStopDetail parking_stop_detail;
    uint32_t session_holder;
} ArmStatus;

typedef struct _ArmSharedCommand {
    pb_size_t which_command;
    union {
        bool clear_parking_stop;
        ParkingStopDetail enter_parking_stop;
    } command;
} ArmSharedCommand;

typedef struct _MitMotorTarget {
    double torque; /* Nm */
    double speed; /* rad/s */
    double position; /* encoder position */
    double kp;
    double kd;
} MitMotorTarget;

/* ////// Motor //////////
 单个电机的目标。后续可能增加更多目标值 */
typedef struct _SingleMotorTarget {
    pb_size_t which_target;
    union {
        double torque; /* Nm */
        double speed; /* rad/s */
        int64_t position; /* encoder position */
        bool brake; /* No matter set to true or false, brake will always be applied. Be aware that putting into brake mode might cause motor to lose position information. */
        MitMotorTarget mit_target; /* Not all motors support this. */
    } target;
} SingleMotorTarget;

typedef struct _MotorTargets {
    pb_callback_t targets;
} MotorTargets;

typedef struct _BaseCommand {
    pb_size_t which_command;
    union {
        /* Only after api_control_initialize is set, can the vehicle be controlled by the API. */
        bool api_control_initialize;
        /* If currently has a clearable parking stop, the parking stop state will be cleared.
     This is the ONLY command that can be sent by non-session holders. */
        bool clear_parking_stop;
        /* You have to continuesly send this command if you want to use api control. (Start sending these commands and keep sending it first, then send api_control_initialize)
     Note only force controlled base types support this.
     MotorTargets and SimpleBaseMoveCommand are mutually exclusive. Once you send one of them, the other will be ignored until deinitialize. */
        MotorTargets motor_targets;
        SimpleBaseMoveCommand simple_move_command;
    } command;
} BaseCommand;

/* Must keep sending. If not, will apply brake after timeout. (Will not cause Parking Stop) */
typedef struct _RotateLiftCommand {
    pb_size_t which_command;
    union {
        bool calibrate;
        MotorTargets motor_targets;
        RotateLiftRuntimeConfig runtime_config;
    } command;
} RotateLiftCommand;

typedef struct _HandCommand {
    bool has_motor_targets;
    MotorTargets motor_targets;
} HandCommand;

typedef struct _ArmExclusiveCommand {
    pb_size_t which_exclusive_command;
    union {
        /* Only after api_control_initialize is set, can the vehicle be controlled by the API. */
        bool api_control_initialize;
        /* If currently has a clearable parking stop, the parking stop state will be cleared. */
        bool clear_parking_stop;
        /* You have to continuesly send this command if you want to use api control. (Start sending these commands and keep sending it first, then send api_control_initialize)
     The API does not support simple speed control. */
        MotorTargets motor_targets;
        /* Just in case */
        bool calibrate;
    } exclusive_command;
    ArmMode target_mode;
} ArmExclusiveCommand;

typedef struct _ArmCommand {
    pb_size_t which_command;
    union {
        /* Only the session holder can send this command. Ohterwise will be ignored. */
        ArmExclusiveCommand arm_exclusive_command;
        ArmSharedCommand arm_shared_command;
    } command;
} ArmCommand;

typedef struct _MotorStatus {
    /* Nm */
    double torque;
    /* In general positivive is counter-clockwise(Right hand). But view angle is defined differently for different robot types.
 View XSTD guide for detailed definition of positive direction.
 m/s, direction is not defined, for linear motor */
    double speed;
    /* encoder position */
    int64_t position;
    /* Number of pulses per rotation, output asix
 Number of pulses per meter, for linear motor */
    uint32_t pulse_per_rotation;
    double wheel_radius;
    pb_callback_t error;
    bool has_current_target;
    SingleMotorTarget current_target;
    bool has_driver_temperature;
    float driver_temperature;
    bool has_motor_temperature;
    float motor_temperature;
    /* current suppiled voltage */
    bool has_voltage;
    float voltage;
} MotorStatus;

/* Hand, 3+3 Arms, etc */
typedef struct _SecondaryDeviceStatus {
    /* Can be used to tell from different devices, e.g. Imu1, Imu2, Hand1, Hand2, Gamepad1, Gamepad2, etc. */
    uint32_t device_id;
    pb_size_t which_status;
    union {
        /* Imu's raw data. Independent of mounting position. This is tricky because different robot types have different mounting positions. Not all robot types have imu.
     Imu 的原始数据。与安装位置无关。请特别注意不同机器人类型有不同的安装位置。不是所有机器人类型都有 imu。 */
        ImuData imu_data;
        /* Hand status. Optional.
     机械手的数据。不是所有机器人类型都有机械手。 */
        HandStatus hand_status;
        /* Gamepad read. Optional.
     遥控器读取的数据。仅供参考 */
        GamepadRead gamepad_read;
    } status;
} SecondaryDeviceStatus;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _RobotType_MIN RobotType_RtUnknown
#define _RobotType_MAX RobotType_RtPureForwardOnly
#define _RobotType_ARRAYSIZE ((RobotType)(RobotType_RtPureForwardOnly+1))

#define _BaseState_MIN BaseState_BsParked
#define _BaseState_MAX BaseState_BsEmergencyStop
#define _BaseState_ARRAYSIZE ((BaseState)(BaseState_BsEmergencyStop+1))

#define _LiftState_MIN LiftState_LsBrake
#define _LiftState_MAX LiftState_LsEmergencyStop
#define _LiftState_ARRAYSIZE ((LiftState)(LiftState_LsEmergencyStop+1))

#define _ArmMode_MIN ArmMode_AmBrake
#define _ArmMode_MAX ArmMode_AmZeroCurrent
#define _ArmMode_ARRAYSIZE ((ArmMode)(ArmMode_AmZeroCurrent+1))

#define _HandType_MIN HandType_HtInvalid
#define _HandType_MAX HandType_HtGp100
#define _HandType_ARRAYSIZE ((HandType)(HandType_HtGp100+1))

#define _ReportFrequency_MIN ReportFrequency_Rf1000Hz
#define _ReportFrequency_MAX ReportFrequency_Rf250Hz
#define _ReportFrequency_ARRAYSIZE ((ReportFrequency)(ReportFrequency_Rf250Hz+1))

#define _ParkingStopCategory_MIN ParkingStopCategory_PscEmergencyStopButton
#define _ParkingStopCategory_MAX ParkingStopCategory_PscBmsTimeout
#define _ParkingStopCategory_ARRAYSIZE ((ParkingStopCategory)(ParkingStopCategory_PscBmsTimeout+1))

#define _WarningCategory_MIN WarningCategory_WcUnknownWarningCategory
#define _WarningCategory_MAX WarningCategory_WcBatteryLow
#define _WarningCategory_ARRAYSIZE ((WarningCategory)(WarningCategory_WcBatteryLow+1))

#define _MotorError_MIN MotorError_MeCommunicationError
#define _MotorError_MAX MotorError_MeGeneralError
#define _MotorError_ARRAYSIZE ((MotorError)(MotorError_MeGeneralError+1))


#define BaseStatus_state_ENUMTYPE BaseState
#define BaseStatus_warning_ENUMTYPE WarningCategory




#define RotateLiftStatus_state_ENUMTYPE LiftState



#define LinearLiftStatus_state_ENUMTYPE LiftState


#define ArmStatus_current_mode_ENUMTYPE ArmMode

#define HandStatus_hand_type_ENUMTYPE HandType



#define ArmExclusiveCommand_target_mode_ENUMTYPE ArmMode







#define ParkingStopDetail_category_ENUMTYPE ParkingStopCategory




#define MotorStatus_error_ENUMTYPE MotorError



/* Initializer values for message structs */
#define BaseEstimatedOdometry_init_default       {0, 0, 0, 0, 0, 0}
#define BaseStatus_init_default                  {_BaseState_MIN, 0, 0, 0, {{NULL}, NULL}, 0, false, 0, false, ParkingStopDetail_init_default, false, _WarningCategory_MIN, false, BaseEstimatedOdometry_init_default}
#define XyzSpeed_init_default                    {0, 0, 0}
#define SimpleBaseMoveCommand_init_default       {0, {XyzSpeed_init_default}}
#define BaseCommand_init_default                 {0, {0}}
#define RotateLiftStatus_init_default            {0, _LiftState_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, ParkingStopDetail_init_default}
#define RotateLiftRuntimeConfig_init_default     {{{NULL}, NULL}}
#define RotateLiftCommand_init_default           {0, {0}}
#define LinearLiftStatus_init_default            {0, _LiftState_MIN, 0, 0, 0, 0, 0, false, ParkingStopDetail_init_default, false, 0}
#define LinearLiftCommand_init_default           {0, {0}}
#define ArmStatus_init_default                   {0, _ArmMode_MIN, 0, {{NULL}, NULL}, false, ParkingStopDetail_init_default, 0}
#define HandStatus_init_default                  {_HandType_MIN, {{NULL}, NULL}}
#define HandCommand_init_default                 {false, MotorTargets_init_default}
#define ArmSharedCommand_init_default            {0, {0}}
#define ArmExclusiveCommand_init_default         {0, {0}, _ArmMode_MIN}
#define ArmCommand_init_default                  {0, {ArmExclusiveCommand_init_default}}
#define GamepadRead_init_default                 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define ImuAcceleration_init_default             {0, 0, 0}
#define ImuAngularVelocity_init_default          {0, 0, 0}
#define ImuQuaternion_init_default               {0, 0, 0, 0}
#define ImuData_init_default                     {false, ImuAcceleration_init_default, false, ImuAngularVelocity_init_default, false, ImuQuaternion_init_default}
#define ParkingStopDetail_init_default           {{{NULL}, NULL}, _ParkingStopCategory_MIN, 0}
#define SingleMotorTarget_init_default           {0, {0}}
#define MitMotorTarget_init_default              {0, 0, 0, 0, 0}
#define MotorTargets_init_default                {{{NULL}, NULL}}
#define MotorStatus_init_default                 {0, 0, 0, 0, 0, {{NULL}, NULL}, false, SingleMotorTarget_init_default, false, 0, false, 0, false, 0}
#define SecondaryDeviceStatus_init_default       {0, 0, {ImuData_init_default}}
#define BaseEstimatedOdometry_init_zero          {0, 0, 0, 0, 0, 0}
#define BaseStatus_init_zero                     {_BaseState_MIN, 0, 0, 0, {{NULL}, NULL}, 0, false, 0, false, ParkingStopDetail_init_zero, false, _WarningCategory_MIN, false, BaseEstimatedOdometry_init_zero}
#define XyzSpeed_init_zero                       {0, 0, 0}
#define SimpleBaseMoveCommand_init_zero          {0, {XyzSpeed_init_zero}}
#define BaseCommand_init_zero                    {0, {0}}
#define RotateLiftStatus_init_zero               {0, _LiftState_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, ParkingStopDetail_init_zero}
#define RotateLiftRuntimeConfig_init_zero        {{{NULL}, NULL}}
#define RotateLiftCommand_init_zero              {0, {0}}
#define LinearLiftStatus_init_zero               {0, _LiftState_MIN, 0, 0, 0, 0, 0, false, ParkingStopDetail_init_zero, false, 0}
#define LinearLiftCommand_init_zero              {0, {0}}
#define ArmStatus_init_zero                      {0, _ArmMode_MIN, 0, {{NULL}, NULL}, false, ParkingStopDetail_init_zero, 0}
#define HandStatus_init_zero                     {_HandType_MIN, {{NULL}, NULL}}
#define HandCommand_init_zero                    {false, MotorTargets_init_zero}
#define ArmSharedCommand_init_zero               {0, {0}}
#define ArmExclusiveCommand_init_zero            {0, {0}, _ArmMode_MIN}
#define ArmCommand_init_zero                     {0, {ArmExclusiveCommand_init_zero}}
#define GamepadRead_init_zero                    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define ImuAcceleration_init_zero                {0, 0, 0}
#define ImuAngularVelocity_init_zero             {0, 0, 0}
#define ImuQuaternion_init_zero                  {0, 0, 0, 0}
#define ImuData_init_zero                        {false, ImuAcceleration_init_zero, false, ImuAngularVelocity_init_zero, false, ImuQuaternion_init_zero}
#define ParkingStopDetail_init_zero              {{{NULL}, NULL}, _ParkingStopCategory_MIN, 0}
#define SingleMotorTarget_init_zero              {0, {0}}
#define MitMotorTarget_init_zero                 {0, 0, 0, 0, 0}
#define MotorTargets_init_zero                   {{{NULL}, NULL}}
#define MotorStatus_init_zero                    {0, 0, 0, 0, 0, {{NULL}, NULL}, false, SingleMotorTarget_init_zero, false, 0, false, 0, false, 0}
#define SecondaryDeviceStatus_init_zero          {0, 0, {ImuData_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define BaseEstimatedOdometry_speed_x_tag        1
#define BaseEstimatedOdometry_speed_y_tag        2
#define BaseEstimatedOdometry_speed_z_tag        3
#define BaseEstimatedOdometry_pos_x_tag          4
#define BaseEstimatedOdometry_pos_y_tag          5
#define BaseEstimatedOdometry_pos_z_tag          6
#define XyzSpeed_speed_x_tag                     1
#define XyzSpeed_speed_y_tag                     2
#define XyzSpeed_speed_z_tag                     3
#define SimpleBaseMoveCommand_xyz_speed_tag      1
#define SimpleBaseMoveCommand_zero_resistance_tag 2
#define SimpleBaseMoveCommand_brake_tag          3
#define RotateLiftRuntimeConfig_pos_mode_max_speed_tag 1
#define LinearLiftCommand_calibrate_tag          1
#define LinearLiftCommand_target_pos_tag         2
#define LinearLiftCommand_brake_tag              3
#define LinearLiftCommand_set_speed_tag          4
#define HandStatus_hand_type_tag                 1
#define HandStatus_motor_status_tag              2
#define GamepadRead_left_stick_x_tag             1
#define GamepadRead_left_stick_y_tag             2
#define GamepadRead_right_stick_x_tag            3
#define GamepadRead_right_stick_y_tag            4
#define GamepadRead_left_bumper_tag              5
#define GamepadRead_right_bumper_tag             6
#define GamepadRead_left_trigger_tag             7
#define GamepadRead_right_trigger_tag            8
#define GamepadRead_a_button_tag                 9
#define GamepadRead_b_button_tag                 10
#define GamepadRead_x_button_tag                 11
#define GamepadRead_y_button_tag                 12
#define GamepadRead_select_button_tag            13
#define GamepadRead_start_button_tag             14
#define GamepadRead_left_stick_button_tag        15
#define GamepadRead_right_stick_button_tag       16
#define GamepadRead_dpad_up_tag                  17
#define GamepadRead_dpad_down_tag                18
#define GamepadRead_dpad_left_tag                19
#define GamepadRead_dpad_right_tag               20
#define ImuAcceleration_ax_tag                   1
#define ImuAcceleration_ay_tag                   2
#define ImuAcceleration_az_tag                   3
#define ImuAngularVelocity_wx_tag                1
#define ImuAngularVelocity_wy_tag                2
#define ImuAngularVelocity_wz_tag                3
#define ImuQuaternion_qx_tag                     1
#define ImuQuaternion_qy_tag                     2
#define ImuQuaternion_qz_tag                     3
#define ImuQuaternion_qw_tag                     4
#define ImuData_acceleration_tag                 1
#define ImuData_angular_velocity_tag             2
#define ImuData_quaternion_tag                   3
#define ParkingStopDetail_reason_tag             1
#define ParkingStopDetail_category_tag           2
#define ParkingStopDetail_is_remotely_clearable_tag 3
#define BaseStatus_state_tag                     1
#define BaseStatus_api_control_initialized_tag   2
#define BaseStatus_battery_voltage_tag           3
#define BaseStatus_battery_thousandth_tag        4
#define BaseStatus_motor_status_tag              5
#define BaseStatus_session_holder_tag            6
#define BaseStatus_battery_charging_tag          10
#define BaseStatus_parking_stop_detail_tag       11
#define BaseStatus_warning_tag                   12
#define BaseStatus_estimated_odometry_tag        13
#define RotateLiftStatus_calibrated_tag          1
#define RotateLiftStatus_state_tag               2
#define RotateLiftStatus_motor_status_tag        3
#define RotateLiftStatus_max_pos_tag             4
#define RotateLiftStatus_min_pos_tag             5
#define RotateLiftStatus_parking_stop_detail_tag 10
#define LinearLiftStatus_calibrated_tag          1
#define LinearLiftStatus_state_tag               2
#define LinearLiftStatus_max_pos_tag             3
#define LinearLiftStatus_current_pos_tag         4
#define LinearLiftStatus_pulse_per_rotation_tag  5
#define LinearLiftStatus_max_speed_tag           6
#define LinearLiftStatus_speed_tag               7
#define LinearLiftStatus_parking_stop_detail_tag 10
#define LinearLiftStatus_custom_button_pressed_tag 11
#define ArmStatus_api_control_initialized_tag    1
#define ArmStatus_current_mode_tag               2
#define ArmStatus_calibrated_tag                 3
#define ArmStatus_motor_status_tag               4
#define ArmStatus_parking_stop_detail_tag        5
#define ArmStatus_session_holder_tag             6
#define ArmSharedCommand_clear_parking_stop_tag  1
#define ArmSharedCommand_enter_parking_stop_tag  2
#define MitMotorTarget_torque_tag                1
#define MitMotorTarget_speed_tag                 2
#define MitMotorTarget_position_tag              3
#define MitMotorTarget_kp_tag                    4
#define MitMotorTarget_kd_tag                    5
#define SingleMotorTarget_torque_tag             1
#define SingleMotorTarget_speed_tag              2
#define SingleMotorTarget_position_tag           3
#define SingleMotorTarget_brake_tag              4
#define SingleMotorTarget_mit_target_tag         5
#define MotorTargets_targets_tag                 1
#define BaseCommand_api_control_initialize_tag   1
#define BaseCommand_clear_parking_stop_tag       2
#define BaseCommand_motor_targets_tag            3
#define BaseCommand_simple_move_command_tag      5
#define RotateLiftCommand_calibrate_tag          1
#define RotateLiftCommand_motor_targets_tag      2
#define RotateLiftCommand_runtime_config_tag     3
#define HandCommand_motor_targets_tag            1
#define ArmExclusiveCommand_api_control_initialize_tag 1
#define ArmExclusiveCommand_clear_parking_stop_tag 2
#define ArmExclusiveCommand_motor_targets_tag    3
#define ArmExclusiveCommand_calibrate_tag        4
#define ArmExclusiveCommand_target_mode_tag      5
#define ArmCommand_arm_exclusive_command_tag     1
#define ArmCommand_arm_shared_command_tag        2
#define MotorStatus_torque_tag                   2
#define MotorStatus_speed_tag                    3
#define MotorStatus_position_tag                 4
#define MotorStatus_pulse_per_rotation_tag       5
#define MotorStatus_wheel_radius_tag             6
#define MotorStatus_error_tag                    7
#define MotorStatus_current_target_tag           8
#define MotorStatus_driver_temperature_tag       11
#define MotorStatus_motor_temperature_tag        12
#define MotorStatus_voltage_tag                  13
#define SecondaryDeviceStatus_device_id_tag      1
#define SecondaryDeviceStatus_imu_data_tag       11
#define SecondaryDeviceStatus_hand_status_tag    12
#define SecondaryDeviceStatus_gamepad_read_tag   13

/* Struct field encoding specification for nanopb */
#define BaseEstimatedOdometry_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    speed_x,           1) \
X(a, STATIC,   SINGULAR, FLOAT,    speed_y,           2) \
X(a, STATIC,   SINGULAR, FLOAT,    speed_z,           3) \
X(a, STATIC,   SINGULAR, DOUBLE,   pos_x,             4) \
X(a, STATIC,   SINGULAR, DOUBLE,   pos_y,             5) \
X(a, STATIC,   SINGULAR, DOUBLE,   pos_z,             6)
#define BaseEstimatedOdometry_CALLBACK NULL
#define BaseEstimatedOdometry_DEFAULT NULL

#define BaseStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, BOOL,     api_control_initialized,   2) \
X(a, STATIC,   SINGULAR, FLOAT,    battery_voltage,   3) \
X(a, STATIC,   SINGULAR, UINT32,   battery_thousandth,   4) \
X(a, CALLBACK, REPEATED, MESSAGE,  motor_status,      5) \
X(a, STATIC,   SINGULAR, UINT32,   session_holder,    6) \
X(a, STATIC,   OPTIONAL, BOOL,     battery_charging,  10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  parking_stop_detail,  11) \
X(a, STATIC,   OPTIONAL, UENUM,    warning,          12) \
X(a, STATIC,   OPTIONAL, MESSAGE,  estimated_odometry,  13)
#define BaseStatus_CALLBACK pb_default_field_callback
#define BaseStatus_DEFAULT NULL
#define BaseStatus_motor_status_MSGTYPE MotorStatus
#define BaseStatus_parking_stop_detail_MSGTYPE ParkingStopDetail
#define BaseStatus_estimated_odometry_MSGTYPE BaseEstimatedOdometry

#define XyzSpeed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    speed_x,           1) \
X(a, STATIC,   SINGULAR, FLOAT,    speed_y,           2) \
X(a, STATIC,   SINGULAR, FLOAT,    speed_z,           3)
#define XyzSpeed_CALLBACK NULL
#define XyzSpeed_DEFAULT NULL

#define SimpleBaseMoveCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,xyz_speed,command.xyz_speed),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (command,zero_resistance,command.zero_resistance),   2) \
X(a, STATIC,   ONEOF,    BOOL,     (command,brake,command.brake),   3)
#define SimpleBaseMoveCommand_CALLBACK NULL
#define SimpleBaseMoveCommand_DEFAULT NULL
#define SimpleBaseMoveCommand_command_xyz_speed_MSGTYPE XyzSpeed

#define BaseCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (command,api_control_initialize,command.api_control_initialize),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (command,clear_parking_stop,command.clear_parking_stop),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,motor_targets,command.motor_targets),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,simple_move_command,command.simple_move_command),   5)
#define BaseCommand_CALLBACK NULL
#define BaseCommand_DEFAULT NULL
#define BaseCommand_command_motor_targets_MSGTYPE MotorTargets
#define BaseCommand_command_simple_move_command_MSGTYPE SimpleBaseMoveCommand

#define RotateLiftStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     calibrated,        1) \
X(a, STATIC,   SINGULAR, UENUM,    state,             2) \
X(a, CALLBACK, REPEATED, MESSAGE,  motor_status,      3) \
X(a, CALLBACK, REPEATED, INT32,    max_pos,           4) \
X(a, CALLBACK, REPEATED, INT32,    min_pos,           5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  parking_stop_detail,  10)
#define RotateLiftStatus_CALLBACK pb_default_field_callback
#define RotateLiftStatus_DEFAULT NULL
#define RotateLiftStatus_motor_status_MSGTYPE MotorStatus
#define RotateLiftStatus_parking_stop_detail_MSGTYPE ParkingStopDetail

#define RotateLiftRuntimeConfig_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, DOUBLE,   pos_mode_max_speed,   1)
#define RotateLiftRuntimeConfig_CALLBACK pb_default_field_callback
#define RotateLiftRuntimeConfig_DEFAULT NULL

#define RotateLiftCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (command,calibrate,command.calibrate),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,motor_targets,command.motor_targets),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,runtime_config,command.runtime_config),   3)
#define RotateLiftCommand_CALLBACK NULL
#define RotateLiftCommand_DEFAULT NULL
#define RotateLiftCommand_command_motor_targets_MSGTYPE MotorTargets
#define RotateLiftCommand_command_runtime_config_MSGTYPE RotateLiftRuntimeConfig

#define LinearLiftStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     calibrated,        1) \
X(a, STATIC,   SINGULAR, UENUM,    state,             2) \
X(a, STATIC,   SINGULAR, INT64,    max_pos,           3) \
X(a, STATIC,   SINGULAR, INT64,    current_pos,       4) \
X(a, STATIC,   SINGULAR, UINT32,   pulse_per_rotation,   5) \
X(a, STATIC,   SINGULAR, UINT32,   max_speed,         6) \
X(a, STATIC,   SINGULAR, UINT32,   speed,             7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  parking_stop_detail,  10) \
X(a, STATIC,   OPTIONAL, BOOL,     custom_button_pressed,  11)
#define LinearLiftStatus_CALLBACK NULL
#define LinearLiftStatus_DEFAULT NULL
#define LinearLiftStatus_parking_stop_detail_MSGTYPE ParkingStopDetail

#define LinearLiftCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (command,calibrate,command.calibrate),   1) \
X(a, STATIC,   ONEOF,    INT64,    (command,target_pos,command.target_pos),   2) \
X(a, STATIC,   ONEOF,    BOOL,     (command,brake,command.brake),   3) \
X(a, STATIC,   ONEOF,    UINT32,   (command,set_speed,command.set_speed),   4)
#define LinearLiftCommand_CALLBACK NULL
#define LinearLiftCommand_DEFAULT NULL

#define ArmStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     api_control_initialized,   1) \
X(a, STATIC,   SINGULAR, UENUM,    current_mode,      2) \
X(a, STATIC,   SINGULAR, BOOL,     calibrated,        3) \
X(a, CALLBACK, REPEATED, MESSAGE,  motor_status,      4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  parking_stop_detail,   5) \
X(a, STATIC,   SINGULAR, UINT32,   session_holder,    6)
#define ArmStatus_CALLBACK pb_default_field_callback
#define ArmStatus_DEFAULT NULL
#define ArmStatus_motor_status_MSGTYPE MotorStatus
#define ArmStatus_parking_stop_detail_MSGTYPE ParkingStopDetail

#define HandStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    hand_type,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  motor_status,      2)
#define HandStatus_CALLBACK pb_default_field_callback
#define HandStatus_DEFAULT NULL
#define HandStatus_motor_status_MSGTYPE MotorStatus

#define HandCommand_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  motor_targets,     1)
#define HandCommand_CALLBACK NULL
#define HandCommand_DEFAULT NULL
#define HandCommand_motor_targets_MSGTYPE MotorTargets

#define ArmSharedCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (command,clear_parking_stop,command.clear_parking_stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,enter_parking_stop,command.enter_parking_stop),   2)
#define ArmSharedCommand_CALLBACK NULL
#define ArmSharedCommand_DEFAULT NULL
#define ArmSharedCommand_command_enter_parking_stop_MSGTYPE ParkingStopDetail

#define ArmExclusiveCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (exclusive_command,api_control_initialize,exclusive_command.api_control_initialize),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (exclusive_command,clear_parking_stop,exclusive_command.clear_parking_stop),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (exclusive_command,motor_targets,exclusive_command.motor_targets),   3) \
X(a, STATIC,   ONEOF,    BOOL,     (exclusive_command,calibrate,exclusive_command.calibrate),   4) \
X(a, STATIC,   SINGULAR, UENUM,    target_mode,       5)
#define ArmExclusiveCommand_CALLBACK NULL
#define ArmExclusiveCommand_DEFAULT NULL
#define ArmExclusiveCommand_exclusive_command_motor_targets_MSGTYPE MotorTargets

#define ArmCommand_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,arm_exclusive_command,command.arm_exclusive_command),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (command,arm_shared_command,command.arm_shared_command),   2)
#define ArmCommand_CALLBACK NULL
#define ArmCommand_DEFAULT NULL
#define ArmCommand_command_arm_exclusive_command_MSGTYPE ArmExclusiveCommand
#define ArmCommand_command_arm_shared_command_MSGTYPE ArmSharedCommand

#define GamepadRead_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    left_stick_x,      1) \
X(a, STATIC,   SINGULAR, FLOAT,    left_stick_y,      2) \
X(a, STATIC,   SINGULAR, FLOAT,    right_stick_x,     3) \
X(a, STATIC,   SINGULAR, FLOAT,    right_stick_y,     4) \
X(a, STATIC,   SINGULAR, BOOL,     left_bumper,       5) \
X(a, STATIC,   SINGULAR, BOOL,     right_bumper,      6) \
X(a, STATIC,   SINGULAR, FLOAT,    left_trigger,      7) \
X(a, STATIC,   SINGULAR, FLOAT,    right_trigger,     8) \
X(a, STATIC,   SINGULAR, BOOL,     a_button,          9) \
X(a, STATIC,   SINGULAR, BOOL,     b_button,         10) \
X(a, STATIC,   SINGULAR, BOOL,     x_button,         11) \
X(a, STATIC,   SINGULAR, BOOL,     y_button,         12) \
X(a, STATIC,   SINGULAR, BOOL,     select_button,    13) \
X(a, STATIC,   SINGULAR, BOOL,     start_button,     14) \
X(a, STATIC,   SINGULAR, BOOL,     left_stick_button,  15) \
X(a, STATIC,   SINGULAR, BOOL,     right_stick_button,  16) \
X(a, STATIC,   SINGULAR, BOOL,     dpad_up,          17) \
X(a, STATIC,   SINGULAR, BOOL,     dpad_down,        18) \
X(a, STATIC,   SINGULAR, BOOL,     dpad_left,        19) \
X(a, STATIC,   SINGULAR, BOOL,     dpad_right,       20)
#define GamepadRead_CALLBACK NULL
#define GamepadRead_DEFAULT NULL

#define ImuAcceleration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    ax,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    ay,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    az,                3)
#define ImuAcceleration_CALLBACK NULL
#define ImuAcceleration_DEFAULT NULL

#define ImuAngularVelocity_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    wx,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    wy,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    wz,                3)
#define ImuAngularVelocity_CALLBACK NULL
#define ImuAngularVelocity_DEFAULT NULL

#define ImuQuaternion_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    qx,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    qy,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    qz,                3) \
X(a, STATIC,   SINGULAR, FLOAT,    qw,                4)
#define ImuQuaternion_CALLBACK NULL
#define ImuQuaternion_DEFAULT NULL

#define ImuData_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  acceleration,      1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  angular_velocity,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  quaternion,        3)
#define ImuData_CALLBACK NULL
#define ImuData_DEFAULT NULL
#define ImuData_acceleration_MSGTYPE ImuAcceleration
#define ImuData_angular_velocity_MSGTYPE ImuAngularVelocity
#define ImuData_quaternion_MSGTYPE ImuQuaternion

#define ParkingStopDetail_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   reason,            1) \
X(a, STATIC,   SINGULAR, UENUM,    category,          2) \
X(a, STATIC,   SINGULAR, BOOL,     is_remotely_clearable,   3)
#define ParkingStopDetail_CALLBACK pb_default_field_callback
#define ParkingStopDetail_DEFAULT NULL

#define SingleMotorTarget_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    DOUBLE,   (target,torque,target.torque),   1) \
X(a, STATIC,   ONEOF,    DOUBLE,   (target,speed,target.speed),   2) \
X(a, STATIC,   ONEOF,    INT64,    (target,position,target.position),   3) \
X(a, STATIC,   ONEOF,    BOOL,     (target,brake,target.brake),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (target,mit_target,target.mit_target),   5)
#define SingleMotorTarget_CALLBACK NULL
#define SingleMotorTarget_DEFAULT NULL
#define SingleMotorTarget_target_mit_target_MSGTYPE MitMotorTarget

#define MitMotorTarget_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   torque,            1) \
X(a, STATIC,   SINGULAR, DOUBLE,   speed,             2) \
X(a, STATIC,   SINGULAR, DOUBLE,   position,          3) \
X(a, STATIC,   SINGULAR, DOUBLE,   kp,                4) \
X(a, STATIC,   SINGULAR, DOUBLE,   kd,                5)
#define MitMotorTarget_CALLBACK NULL
#define MitMotorTarget_DEFAULT NULL

#define MotorTargets_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  targets,           1)
#define MotorTargets_CALLBACK pb_default_field_callback
#define MotorTargets_DEFAULT NULL
#define MotorTargets_targets_MSGTYPE SingleMotorTarget

#define MotorStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   torque,            2) \
X(a, STATIC,   SINGULAR, DOUBLE,   speed,             3) \
X(a, STATIC,   SINGULAR, INT64,    position,          4) \
X(a, STATIC,   SINGULAR, UINT32,   pulse_per_rotation,   5) \
X(a, STATIC,   SINGULAR, DOUBLE,   wheel_radius,      6) \
X(a, CALLBACK, REPEATED, UENUM,    error,             7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  current_target,    8) \
X(a, STATIC,   OPTIONAL, FLOAT,    driver_temperature,  11) \
X(a, STATIC,   OPTIONAL, FLOAT,    motor_temperature,  12) \
X(a, STATIC,   OPTIONAL, FLOAT,    voltage,          13)
#define MotorStatus_CALLBACK pb_default_field_callback
#define MotorStatus_DEFAULT NULL
#define MotorStatus_current_target_MSGTYPE SingleMotorTarget

#define SecondaryDeviceStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   device_id,         1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (status,imu_data,status.imu_data),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (status,hand_status,status.hand_status),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (status,gamepad_read,status.gamepad_read),  13)
#define SecondaryDeviceStatus_CALLBACK NULL
#define SecondaryDeviceStatus_DEFAULT NULL
#define SecondaryDeviceStatus_status_imu_data_MSGTYPE ImuData
#define SecondaryDeviceStatus_status_hand_status_MSGTYPE HandStatus
#define SecondaryDeviceStatus_status_gamepad_read_MSGTYPE GamepadRead

extern const pb_msgdesc_t BaseEstimatedOdometry_msg;
extern const pb_msgdesc_t BaseStatus_msg;
extern const pb_msgdesc_t XyzSpeed_msg;
extern const pb_msgdesc_t SimpleBaseMoveCommand_msg;
extern const pb_msgdesc_t BaseCommand_msg;
extern const pb_msgdesc_t RotateLiftStatus_msg;
extern const pb_msgdesc_t RotateLiftRuntimeConfig_msg;
extern const pb_msgdesc_t RotateLiftCommand_msg;
extern const pb_msgdesc_t LinearLiftStatus_msg;
extern const pb_msgdesc_t LinearLiftCommand_msg;
extern const pb_msgdesc_t ArmStatus_msg;
extern const pb_msgdesc_t HandStatus_msg;
extern const pb_msgdesc_t HandCommand_msg;
extern const pb_msgdesc_t ArmSharedCommand_msg;
extern const pb_msgdesc_t ArmExclusiveCommand_msg;
extern const pb_msgdesc_t ArmCommand_msg;
extern const pb_msgdesc_t GamepadRead_msg;
extern const pb_msgdesc_t ImuAcceleration_msg;
extern const pb_msgdesc_t ImuAngularVelocity_msg;
extern const pb_msgdesc_t ImuQuaternion_msg;
extern const pb_msgdesc_t ImuData_msg;
extern const pb_msgdesc_t ParkingStopDetail_msg;
extern const pb_msgdesc_t SingleMotorTarget_msg;
extern const pb_msgdesc_t MitMotorTarget_msg;
extern const pb_msgdesc_t MotorTargets_msg;
extern const pb_msgdesc_t MotorStatus_msg;
extern const pb_msgdesc_t SecondaryDeviceStatus_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define BaseEstimatedOdometry_fields &BaseEstimatedOdometry_msg
#define BaseStatus_fields &BaseStatus_msg
#define XyzSpeed_fields &XyzSpeed_msg
#define SimpleBaseMoveCommand_fields &SimpleBaseMoveCommand_msg
#define BaseCommand_fields &BaseCommand_msg
#define RotateLiftStatus_fields &RotateLiftStatus_msg
#define RotateLiftRuntimeConfig_fields &RotateLiftRuntimeConfig_msg
#define RotateLiftCommand_fields &RotateLiftCommand_msg
#define LinearLiftStatus_fields &LinearLiftStatus_msg
#define LinearLiftCommand_fields &LinearLiftCommand_msg
#define ArmStatus_fields &ArmStatus_msg
#define HandStatus_fields &HandStatus_msg
#define HandCommand_fields &HandCommand_msg
#define ArmSharedCommand_fields &ArmSharedCommand_msg
#define ArmExclusiveCommand_fields &ArmExclusiveCommand_msg
#define ArmCommand_fields &ArmCommand_msg
#define GamepadRead_fields &GamepadRead_msg
#define ImuAcceleration_fields &ImuAcceleration_msg
#define ImuAngularVelocity_fields &ImuAngularVelocity_msg
#define ImuQuaternion_fields &ImuQuaternion_msg
#define ImuData_fields &ImuData_msg
#define ParkingStopDetail_fields &ParkingStopDetail_msg
#define SingleMotorTarget_fields &SingleMotorTarget_msg
#define MitMotorTarget_fields &MitMotorTarget_msg
#define MotorTargets_fields &MotorTargets_msg
#define MotorStatus_fields &MotorStatus_msg
#define SecondaryDeviceStatus_fields &SecondaryDeviceStatus_msg

/* Maximum encoded size of messages (where known) */
/* BaseStatus_size depends on runtime parameters */
/* BaseCommand_size depends on runtime parameters */
/* RotateLiftStatus_size depends on runtime parameters */
/* RotateLiftRuntimeConfig_size depends on runtime parameters */
/* RotateLiftCommand_size depends on runtime parameters */
/* LinearLiftStatus_size depends on runtime parameters */
/* ArmStatus_size depends on runtime parameters */
/* HandStatus_size depends on runtime parameters */
/* HandCommand_size depends on runtime parameters */
/* ArmSharedCommand_size depends on runtime parameters */
/* ArmExclusiveCommand_size depends on runtime parameters */
/* ArmCommand_size depends on runtime parameters */
/* ParkingStopDetail_size depends on runtime parameters */
/* MotorTargets_size depends on runtime parameters */
/* MotorStatus_size depends on runtime parameters */
/* SecondaryDeviceStatus_size depends on runtime parameters */
#define BaseEstimatedOdometry_size               42
#define GamepadRead_size                         63
#define ImuAcceleration_size                     15
#define ImuAngularVelocity_size                  15
#define ImuData_size                             56
#define ImuQuaternion_size                       20
#define LinearLiftCommand_size                   11
#define MitMotorTarget_size                      45
#define PUBLIC_API_TYPES_PB_H_MAX_SIZE           GamepadRead_size
#define SimpleBaseMoveCommand_size               17
#define SingleMotorTarget_size                   47
#define XyzSpeed_size                            15

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
